from aiogram import types, executor, Dispatcher, Bot
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from api_sheets import call_metals_prices
from api_sheets import record, delete_last_row, record_minus_operation, get_report

import os
import datetime
from data import db_session
from data.users import User
from data.all_operations import AllOperations
from data.minus_operations import MinusOperations
from data.clean_weights import ButtonsCleanWeights

from config import TOKEN

db_session.global_init("db/Metals_with_data.db")


metal_types = dict(call_metals_prices())
kush_prices = dict(call_metals_prices(kush=True))
menu_buttons = ['–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞', '–ö—É—à', '–û—Ç—á—ë—Ç—ã', '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞', 'üìö–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ']
information_buttons = ['–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è', '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
                       '–¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤', '–ö—É—à —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤']
kush_buttons = ['–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞', '–£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫—É—à–∞']
clean_weights_buttons = [name[0] for name in db_session.create_session().query(
    ButtonsCleanWeights.name_clean_weight).all()]
temp_weights = {}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
reply_kb_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_metals = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_information = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_kush = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_clean_weights = ReplyKeyboardMarkup(resize_keyboard=True)
inline_kb_markup = InlineKeyboardMarkup()


class Recording(StatesGroup):
    waiting_for_data_record = State()


class Kush(StatesGroup):
    waiting_for_kush_request = State()
    waiting_for_kush_percent = State()


class Report(StatesGroup):
    waiting_for_report_request = State()


class CleanWeights(StatesGroup):
    waiting_for_request = State()
    waiting_for_new_clean_weights = State()
    waiting_for_remove_clean_weight = State()


def load_buttons(keyboard, ls_buttons, btn_back=True):
    new_row = True
    for btn in ls_buttons:
        if new_row:
            keyboard.add(types.KeyboardButton(btn))
            new_row = False
        else:
            keyboard.insert(types.KeyboardButton(btn))
            new_row = True
    if btn_back:
        keyboard.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))


load_buttons(reply_kb_menu, menu_buttons, btn_back=False)

reply_kb_metals.add(types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –æ–±—â—É—é —Å—É–º–º–∞'))
load_buttons(reply_kb_metals, [*list(metal_types.keys()), '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å'])

load_buttons(reply_kb_kush, kush_buttons)
load_buttons(reply_kb_information, information_buttons)

reply_kb_clean_weights.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π –≤–µ—Å'))
reply_kb_clean_weights.add(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å'))
load_buttons(reply_kb_clean_weights, [*clean_weights_buttons])


def is_float_int(digits):
    true_symbols = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '-']
    if '-' in digits and digits.index('-') > 0:
        return False
    for symb in digits.replace(',', '.'):
        if symb not in true_symbols:
            return False
    return True


async def swap_metal(message):
    dbs = db_session.create_session()
    user = dbs.query(User).get(message.from_user.id)
    user.metal = message.text
    user.price = float(metal_types[message.text])
    dbs.commit()
    await bot.send_message(message.chat.id,
                           f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞: {user.metal},'
                           f' –¶–µ–Ω–∞: {user.price}',
                           reply_markup=reply_kb_metals)


async def reset_total_amount(message: types.Message):
    dbs = db_session.create_session()
    user = dbs.query(User).get(message.from_user.id)
    user.client_amount = 0
    dbs.commit()
    inline_kb_markup.inline_keyboard.clear()
    await message.answer('–ñ–¥—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞')


async def do_plus_operation(message: types.Message):
    global temp_weights
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        dbs = db_session.create_session()
        user = dbs.query(User).get(message.from_user.id)
        all_operations = AllOperations()
        date_time = str(message.date).split()
        all_operations.date = datetime.datetime.strptime(date_time[0], "%Y-%m-%d").date()
        all_operations.time = datetime.datetime.strptime(date_time[1], "%H:%M:%S").time()
        all_operations.metal = user.metal
        all_operations.quantity = float(message.text.split()[0].replace(',', '.'))
        all_operations.price = float(message.text.split()[1].replace(',', '.')) if ' ' in message.text\
            else float(user.price)
        all_operations.sum = all_operations.quantity * all_operations.price
        all_operations.comment = ' '.join(message.text.split()[2:])
        if not user.kush_recording:
            dbs.add(all_operations)
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        user.client_amount = user.client_amount + all_operations.sum
        if len(inline_kb_markup.inline_keyboard) != 0:
            inline_kb_markup.inline_keyboard.clear()
        inline_kb_markup.add(InlineKeyboardButton(f'–û–±—â–∞—è —Å—É–º–º–∞: {user.client_amount}',
                                                  callback_data='show_temp_amount'))
        await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - {all_operations.metal}: '
                                                f'{all_operations.quantity},'
                                                f' –¶–µ–Ω–∞: {all_operations.price},'
                                                f' –°—É–º–º–∞: {round(all_operations.sum)}',
                               reply_markup=inline_kb_markup)
        values = [date_time[0].replace('-', '.'), date_time[1][:5], all_operations.metal,
                  all_operations.quantity, all_operations.price, all_operations.sum, all_operations.comment]
        dbs.commit()
        if user.kush_recording:
            temp_weights[message.from_user.id].append(values)
            return
        record(values)
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, f'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ')
        return


async def do_minus_operation(message):
    global temp_weights
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        dbs = db_session.create_session()
        user = dbs.query(User).get(message.from_user.id)
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞ –≤ –º–∏–Ω—É—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        minus_operations = MinusOperations()
        minus_operations.metal = user.metal
        minus_operations.date = datetime.datetime.strptime(str(message.date).split()[0], "%Y-%m-%d").date()
        minus_operations.quantity = abs(float(message.text.split()[0].replace(',', '.')))
        minus_operations.task = ''
        minus_operations.where = ''
        if message.text.split()[-1] != '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞':
            minus_operations.price = float(message.text.split()[1].replace(',', '.')) if ' ' in message.text \
                else float(user.price)
            minus_operations.sum = minus_operations.quantity * minus_operations.price
            if len(message.text.split()[2:]) == 1:
                minus_operations.where = message.text.split()[2:3][0]
            if len(message.text.split()[2:]) == 2:
                minus_operations.task = message.text.split()[2:][-1]
                minus_operations.where = message.text.split()[2:][0]
        else:
            minus_operations.price = 0
            minus_operations.sum = 0
            minus_operations.task = message.text.split()[-1]
            minus_operations.where = message.text.split()[1]
        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        all_operations = AllOperations()
        date_time = str(message.date).split()
        all_operations.date = datetime.datetime.strptime(date_time[0], "%Y-%m-%d").date()
        all_operations.time = datetime.datetime.strptime(date_time[1], "%H:%M:%S").time()
        all_operations.metal = user.metal
        all_operations.quantity = float(message.text.split()[0].replace(',', '.'))
        all_operations.price = float(message.text.split()[1].replace(',', '.')) if ' ' in message.text \
            else float(user.price)
        all_operations.sum = all_operations.quantity * all_operations.price
        all_operations.comment = message.text.split()[1]

        dbs.add(minus_operations)
        dbs.add(all_operations)
        user.client_amount = user.client_amount - minus_operations.sum
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        if len(inline_kb_markup.inline_keyboard) != 0:
            inline_kb_markup.inline_keyboard.clear()
        inline_kb_markup.add(InlineKeyboardButton(f'–û–±—â–∞—è —Å—É–º–º–∞: {user.client_amount}',
                                                  callback_data='show_temp_amount'))
        await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - {minus_operations.metal}: '
                                                f'{minus_operations.quantity},'
                                                f' –¶–µ–Ω–∞: {minus_operations.price}, –°—É–º–º–∞: {round(minus_operations.sum)}',
                               reply_markup=inline_kb_markup)
        dbs.commit()
        record_minus_operation([minus_operations.metal, minus_operations.quantity, minus_operations.price, minus_operations.sum,
                                str(message.date).split()[0].replace('-', '.'), minus_operations.task,
                                minus_operations.where])
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, f'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ')
        return


@dp.message_handler(state=Kush.waiting_for_kush_request)
async def do_kush(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    if message.text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    elif message.text == '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞':
        temp_weights[message.from_user.id] = []
        current_user.kush_recording = True
        # reply_kb_metals.keyboard.clear()
        reply_kb_metals.keyboard.insert(0, ['–í–µ—Å–∞ –≤–ø–∏—Å–∞–Ω—ã'])
        reply_kb_metals.keyboard[-1] = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫—É—à–∞']
        await bot.send_message(message.chat.id, '–ö—É—à –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –≤–ø–∏—à–∏—Ç–µ –≤–µ—Å–∞',
                               reply_markup=reply_kb_metals)
        dbs.commit()
        await Recording.waiting_for_data_record.set()
        return
    elif message.text == '–£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫—É—à–∞':
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:")
        await Kush.next()
        return
    # user = dbs.query(User).get(message.from_user.id)
    # dbs.commit()
    await state.finish()


@dp.message_handler(state=Kush.waiting_for_kush_percent)
async def kush_set_percent(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
    elif not is_float_int(message.text) or float(message.text) < 0 or float(message.text.lower()) > 100:
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ")
        return
    user = dbs.query(User).get(message.from_user.id)
    user.kush_percent = float(message.text)
    dbs.commit()
    await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await Kush.waiting_for_kush_request.set()


@dp.message_handler(state=Recording.waiting_for_data_record)
async def do_record(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫—É—à–∞':
        reply_kb_metals.keyboard.pop(0)
        temp_weights[message.from_user.id] = []
        current_user.kush_recording = False
        current_user.client_amount = 0
        reply_kb_metals.keyboard[-1] = ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∫—É—à–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –≤–µ—Å–∞ —Å–±—Ä–æ—à–µ–Ω—ã',
                               reply_markup=reply_kb_kush)
        await state.finish()
        await Kush.waiting_for_kush_request.set()
        return
    if '-' in message.text.split()[0] and is_float_int(message.text.split()[0]):
        await do_minus_operation(message)
    elif is_float_int(message.text.split()[0]):
        await do_plus_operation(message)
    elif message.text in metal_types.keys():
        await swap_metal(message)
    elif message.text == '–°–±—Ä–æ—Å–∏—Ç—å –æ–±—â—É—é —Å—É–º–º–∞':
        await reset_total_amount(message)
    elif message.text in '–í–µ—Å–∞ –≤–ø–∏—Å–∞–Ω—ã':
        if not temp_weights[message.from_user.id]:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–ø–∏—Å–∞–ª–∏ –Ω–µ –æ–¥–∏–Ω –≤–µ—Å',
                                   reply_markup=reply_kb_metals)
            return
        # –û–±—â–∞—è —Å—É–º–º–∞ —Å—É–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–µ–Ω–∞–º '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å'
        total_amount_tmp_s = round(sum(operation[5] for operation in temp_weights[message.from_user.id]))
        # –°—É–º–º–∞ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–æ–±—Ä–∞–ª –∫—É—à –∫–ª–∏–µ–Ω—Ç–∞
        worker_amount = round(total_amount_tmp_s / 100 * current_user.kush_percent)
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã, –∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É –ø–æ–¥ –Ω–æ–≤—É—é —Ü–µ–Ω—É
        for operation in temp_weights[message.from_user.id]:
            operation[4] = float(kush_prices[operation[2]].replace(',', '.'))  # –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É
            operation[5] = operation[3] * operation[4]  # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É
        # –°—É–º–º–∞ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–Ω—è—Ç—å –æ—Ç —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞
        employer_amount = sum(operation[3] * float(kush_prices['–ß–µ—Ä–Ω—ã–π'].replace(',', '.'))
                              for operation in temp_weights[message.from_user.id])
        # –°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ–π –∫—É—à –±—ã–ª —Ä–∞–∑–æ–±—Ä–∞–Ω
        client_amount = round(sum(operation[5] for operation in temp_weights[message.from_user.id])
                              - employer_amount - worker_amount)
        information = f'\n{"---" * 10}\n'.join([f'–°—É–º–º–∞ —Ä–∞–±–æ—á–µ–≥–æ: {worker_amount}', f'–í–∞—à–∞ –°—É–º–º–∞: {client_amount}'])
        await bot.send_message(message.chat.id, information,
                               reply_markup=reply_kb_kush)
        for operation in temp_weights[message.from_user.id]:
            operation[4] = float(kush_prices[operation[2]].replace(',', '.'))  # –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É
            operation[5] = operation[3] * operation[4]  # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É
            all_operations = AllOperations()
            all_operations.date = datetime.datetime.strptime(operation[0], "%Y.%m.%d").date()
            all_operations.time = datetime.datetime.strptime(operation[1], "%H:%M").time()
            all_operations.metal = operation[2]
            all_operations.quantity = operation[3]
            all_operations.price = operation[4]
            all_operations.sum = operation[5]
            all_operations.comment = operation[6]
            dbs.add(all_operations)
            record(operation)
        temp_weights[message.from_user.id] = []
        current_user.kush_recording = False
        current_user.client_amount = 0
        reply_kb_metals.keyboard.pop(0)
        dbs.commit()
        return
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å':
        delete_last_row()
        last_row = dbs.query(AllOperations).order_by(AllOperations.id.desc()).first()
        dbs.delete(last_row)
        await bot.send_message(message.chat.id, f'–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                               reply_markup=reply_kb_metals)
    else:
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ")
        return
    dbs.commit()


@dp.message_handler(state=Report.waiting_for_report_request)
async def show_report(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    elif message.text == '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è':
        request = get_report('all_time')
        if not request:
            request = get_report('all_time')
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
        request = get_report('today')
        if not request:
            request = get_report('today')
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤':
        request = call_metals_prices()
        if not request:
            request = call_metals_prices()
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–ö—É—à —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤':
        request = call_metals_prices(kush=True)
        if not request:
            request = call_metals_prices(kush=True)
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return


@dp.message_handler(state=CleanWeights.waiting_for_request)
async def clean_weights(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π –≤–µ—Å':
        await bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ',
                               reply_markup=reply_kb_clean_weights)
        await CleanWeights.waiting_for_new_clean_weights.set()
        return
    if message.text == '–£–¥–∞–ª–∏—Ç—å –≤–µ—Å':
        await bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞',
                               reply_markup=reply_kb_clean_weights)
        await CleanWeights.waiting_for_remove_clean_weight.set()
    if message.text in clean_weights_buttons:
        clean_weight = dbs.query(ButtonsCleanWeights).filter(ButtonsCleanWeights.name_clean_weight
                                                             == message.text).first()
        await bot.send_photo(message.from_user.id, types.InputFile(clean_weight.path),
                             caption=clean_weight.description_clean_w,
                             reply_to_message_id=message.message_id)


@dp.message_handler(content_types=['photo', 'text'], state=CleanWeights.waiting_for_new_clean_weights)
async def add_new_clean_weight(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.md_text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    if not message.md_text or '-' not in message.md_text and message.md_text.count('-') == 1 or not message.photo:
        await bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å"
                                                " –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ",
                               reply_markup=reply_kb_clean_weights)
        return
    if message.md_text.split('-')[0][:-1].strip() in clean_weights_buttons:
        await bot.send_message(message.chat.id, '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.'
                                                ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                               reply_markup=reply_kb_clean_weights)
        return
    new_clean_weight = ButtonsCleanWeights()
    new_clean_weight.name_clean_weight = message.md_text.split('-')[0][:-1].strip()
    new_clean_weight.description_clean_w = message.md_text.split('-')[1].strip()
    last_row = dbs.query(ButtonsCleanWeights).order_by(ButtonsCleanWeights.id.desc()).first()
    if last_row:
        path = f'photos_of_clean_weights/{last_row.id + 1}.jpg'
    else:
        path = f'photos_of_clean_weights/1.jpg'
    new_clean_weight.path = path
    dbs.add(new_clean_weight)
    clean_weights_buttons.append(new_clean_weight.name_clean_weight)
    await message.photo[-1].download(path)
    reply_kb_clean_weights.keyboard = reply_kb_clean_weights.keyboard[:-1]
    if len(dbs.query(ButtonsCleanWeights).all()) % 2 != 0:
        reply_kb_clean_weights.add(types.KeyboardButton(new_clean_weight.name_clean_weight))
    else:
        reply_kb_clean_weights.insert(types.KeyboardButton(new_clean_weight.name_clean_weight))
    reply_kb_clean_weights.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
    await bot.send_message(message.chat.id, '–ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π –≤–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!',
                           reply_markup=reply_kb_clean_weights)
    dbs.commit()
    await CleanWeights.waiting_for_request.set()


@dp.message_handler(content_types=['photo', 'text'], state=CleanWeights.waiting_for_remove_clean_weight)
async def remove_clean_weight(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.md_text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    elif message.text in clean_weights_buttons:
        clean_weight = dbs.query(ButtonsCleanWeights).filter(ButtonsCleanWeights.name_clean_weight
                                                             == message.text).first()
        os.remove(clean_weight.path)
        dbs.delete(clean_weight)
        clean_weights_buttons.remove(clean_weight.name_clean_weight)

        reply_kb_clean_weights.keyboard.clear()
        reply_kb_clean_weights.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π –≤–µ—Å'))
        reply_kb_clean_weights.add(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤–µ—Å'))
        load_buttons(reply_kb_clean_weights, [*clean_weights_buttons])
        await bot.send_message(message.chat.id, '–ß–∏—Å—Ç—ã–π –≤–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!',
                               reply_markup=reply_kb_clean_weights)
        dbs.commit()
        await CleanWeights.waiting_for_request.set()
    else:
        await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!',
                               reply_markup=reply_kb_clean_weights)


@dp.message_handler(commands=['start'])
async def begin(message: types.Message):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    if not current_user:
        user = User()
        user.id = message.from_user.id
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        dbs.add(user)
    else:
        current_user.metal = '–ß–µ—Ä–Ω—ã–π'
        current_user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        current_user.client_amount = 0
        current_user.kush_recording = False
        current_user.operation_ended = False
        current_user.kush_percent = 0
    dbs.commit()
    print(type(message.chat.id))
    await bot.send_message(message.chat.id, '–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', reply_markup=reply_kb_menu)


@dp.message_handler(content_types=['text', 'photo'])
async def set_text(message):
    global temp_weights
    if message.chat.type == 'private':
        if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞':
            await bot.send_message(message.chat.id, '–¢–∏–ø—ã –º–µ—Ç–∞–ª–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_metals)
            await Recording.waiting_for_data_record.set()
            return
        if message.text == '–ö—É—à':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –∫—É—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_kush)
            await Kush.waiting_for_kush_request.set()
        if message.text == '–û—Ç—á—ë—Ç—ã':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_information)
            await Report.waiting_for_report_request.set()
        if message.text == '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_clean_weights)
            await CleanWeights.waiting_for_request.set()
        if message.text == 'üìö–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
            pass


async def for_startup(empty):
    for user_id in db_session.create_session().query(User.id).all():
        await bot.send_message(user_id[0], '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω', reply_markup=reply_kb_menu)


if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=for_startup)
        except Exception as e:
            print(e)