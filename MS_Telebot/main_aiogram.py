from aiogram import types, executor, Dispatcher, Bot
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫–∏–∏ –∏–∑ –º–æ–¥—É–ª—è api_sheets
from api_sheets import call_metals_prices
from api_sheets import record_plus_operation, delete_last_row, record_minus_operation, get_report

import os
import datetime
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from data import db_session
from data.users import User
from data.all_operations import AllOperations
from data.minus_operations import MinusOperations
from data.clean_weights import ButtonsCleanWeights

# –¢–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º api token
from config import TOKEN

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_session.global_init("db/Metals_with_data.db")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
with open('usage guide', 'r', encoding='UTF-8') as guide:
    GUIDE = ''.join(guide.readlines())

# –ó–¥–µ—Å—å –º—ã –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
metal_types = dict(call_metals_prices())
kush_prices = dict(call_metals_prices(kush=True))

# –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–æ–∫
menu_buttons = ['–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞', '–ö—É—à', '–û—Ç—á—ë—Ç—ã', '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞']
information_buttons = ['–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è', '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
                       '–¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤', '–ö—É—à —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤']
kush_buttons = ['–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞', '–£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫—É—à–∞']
clean_weights_buttons = [name[0] for name in db_session.create_session().query(
    ButtonsCleanWeights.name_clean_weight).all()]

# –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –Ω—É–∂–µ–Ω –¥–ª—è do_kush, –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—Ç–∞—å –ø–æ –¥—Ä—É–≥–∏–º —Ü–µ–Ω–∞–º
temp_operations = {}


# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_kb_menu = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_metals = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_kush = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_kush_recording = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_information = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb_clean_weights = ReplyKeyboardMarkup(resize_keyboard=True)
inline_kb_markup = InlineKeyboardMarkup()


# –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–º –∑–∞–ø—Ä–æ—Å–∞–º:
# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞')
class Recording(StatesGroup):
    waiting_for_data_record = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ö—É—à')
class Kush(StatesGroup):
    waiting_for_kush_request = State()
    waiting_for_kush_percent = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–û—Ç—á—ë—Ç—ã')
class Report(StatesGroup):
    waiting_for_report_request = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞')
class CleanWeights(StatesGroup):
    waiting_for_request = State()
    waiting_for_new_clean_weights = State()
    waiting_for_remove_clean_weight = State()


# –§—É–Ω–∫–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def load_buttons(keyboard, initial_buttons=[], two_buttons_row=[], end_buttons=[], btn_back=True):
    new_row = True
    # –í –Ω–∞—á–∞–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏, –∫–∞–∂–¥—É—é –≤ –Ω–æ–≤—ã–π —Ä—è–¥
    for btn in initial_buttons:
        keyboard.add(types.KeyboardButton(btn))
    # –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø–æ –¥–≤–µ —Ä—è–¥
    for btn in two_buttons_row:
        if new_row:
            keyboard.add(types.KeyboardButton(btn))
            new_row = False
        else:
            keyboard.insert(types.KeyboardButton(btn))
            new_row = True
    # –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    for btn in end_buttons:
        keyboard.add(types.KeyboardButton(btn))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
    if btn_back:
        keyboard.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
load_buttons(reply_kb_menu, two_buttons_row=menu_buttons, end_buttons=['üìö–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'], btn_back=False)
load_buttons(reply_kb_metals, initial_buttons=['–°–±—Ä–æ—Å–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É'],
             two_buttons_row=list(metal_types.keys()), end_buttons=['–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å'])
load_buttons(reply_kb_kush_recording, initial_buttons=['–í–µ—Å–∞ –≤–ø–∏—Å–∞–Ω—ã', '–°–±—Ä–æ—Å–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É'],
             two_buttons_row=list(metal_types.keys()), end_buttons=['–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å',
                                                                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫—É—à–∞'], btn_back=False)
load_buttons(reply_kb_kush, two_buttons_row=kush_buttons)
load_buttons(reply_kb_information, two_buttons_row=information_buttons)
load_buttons(reply_kb_clean_weights, initial_buttons=['–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –µ–≥–æ —á–∏—Å—Ç—ã–º –≤–µ—Å–æ–º', '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç'],
             two_buttons_row=clean_weights_buttons)


# –§—É–Ω–∫–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–µ–Ω–∞–Ω–Ω–æ–µ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º –∏–ª–∏ —á–∏—Å–ª–æ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
def is_float_int(digits):
    true_symbols = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '-']
    # –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å '-' –∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–µ –≤–Ω–∞—á–∞–ª–µ, –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç False
    if '-' in digits and digits.index('-') > 0:
        return False
    for symb in digits.replace(',', '.'):
        if symb not in true_symbols:
            return False
    return True


# –§—É–Ω–∫–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def change_metal(message):
    dbs = db_session.create_session()
    user = dbs.query(User).get(message.from_user.id)
    user.metal = message.text  # –ú–µ–Ω—è–µ–º –º–µ—Ç–∞–ª–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.price = float(metal_types[message.text])  # –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —Ü–µ–Ω—É, –µ—ë —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –±–µ—Ä—ë–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    dbs.commit()
    await bot.send_message(message.chat.id,
                           f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞: {user.metal},'
                           f' –¶–µ–Ω–∞: {user.price}',
                           reply_markup=reply_kb_kush_recording if user.kush_recording else reply_kb_metals)


# –§—É–Ω–∫–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–∏–≤—à—É—é—Å—è –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞
async def reset_total_amount(message: types.Message):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
    dbs = db_session.create_session()
    user = dbs.query(User).get(message.from_user.id)
    user.client_amount = 0
    dbs.commit()
    # –ò —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É –∫–Ω–æ–ø–∫–∏ (–ó–¥–µ—Å—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —É–¥–∞–ª—è—é –∫–Ω–æ–ø–∫—É)
    inline_kb_markup.inline_keyboard.clear()
    await message.answer('–ñ–¥—ë–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞')


# –§—É–Ω–∫–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–ª—é—Å–æ–≤—ã—Ö –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def do_plus_operation(message: types.Message):
    global temp_operations
    split_message = message.text.split()
    try:
        dbs = db_session.create_session()
        user = dbs.query(User).get(message.from_user.id)
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ AllOperations
        all_operations = AllOperations()
        date_time = str(message.date).split()  # –ë–µ—Ä—ë–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        all_operations.date = datetime.datetime.strptime(date_time[0], "%Y-%m-%d").date()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É
        all_operations.time = datetime.datetime.strptime(date_time[1], "%H:%M:%S").time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        all_operations.metal = user.metal  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–µ—Ç–∞–ª–ª
        all_operations.quantity = float(split_message[0].replace(',', '.'))  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–ª–ª–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–Ω—É –∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ —Ü–µ–Ω–µ –∏–∑ metal_types -
        # —ç—Ç—É —Ü–µ–Ω—É –º—ã –∑–∞—Ä–∞–Ω–µ–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞
        all_operations.price = float(split_message[1].replace(',', '.')) if ' ' in message.text\
            else float(user.price)
        all_operations.sum = all_operations.quantity * all_operations.price  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É
        all_operations.comment = ' '.join(split_message[2:])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        # '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞' –∏–∑ '–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –ö—É—à'
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ —á–µ—Ä–µ–∑ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–æ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ,
        # –æ–ø–µ—Ä–∞—Ü–∏—é –º—ã –∑–∞–ø–∏—à–µ–º –ø–æ–∑–∂–µ –ø–æ –¥—Ä—É–≥–æ–π —Ü–µ–Ω–µ –∏ –≤ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if not user.kush_recording:
            dbs.add(all_operations)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        # –¢–∞–∫–∂–µ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è —Å—É–º–º—É –∫ –æ–±—â–µ–π —Å—É–º–º–µ –∫–ª–∏–µ–Ω—Ç–∞
        user.client_amount = user.client_amount + all_operations.sum
        # –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å —Ç–æ, —É–¥–∞–ª—è–µ–º –µ—ë
        if len(inline_kb_markup.inline_keyboard) != 0:
            inline_kb_markup.inline_keyboard.clear()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ,
        # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ—ë —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞
        inline_kb_markup.add(InlineKeyboardButton(f'–û–±—â–∞—è —Å—É–º–º–∞: {user.client_amount}',
                                                  callback_data='reset_total_amount'))
        await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - {all_operations.metal}: '
                                                f'{all_operations.quantity},'
                                                f' –¶–µ–Ω–∞: {all_operations.price},'
                                                f' –°—É–º–º–∞: {round(all_operations.sum)}',
                               reply_markup=inline_kb_markup)
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ google sheets
        data = [date_time[0].replace('-', '.'), date_time[1][:5], all_operations.metal,
                all_operations.quantity, all_operations.price, all_operations.sum, all_operations.comment]
        dbs.commit()
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞' –∏–∑ '–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –ö—É—à'
        # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ temp_operations –∏ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ google sheets
        if user.kush_recording:
            temp_operations[message.from_user.id].append(data)
            return
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—à–ª–∞ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ google sheets
        record_plus_operation(data)
    except:
        await bot.send_message(message.chat.id, f'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ')
        return


# –§—É–Ω–∫–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–∏–Ω—É—Å–æ–≤—ã—Ö –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def do_minus_operation(message):
    global temp_operations
    split_message = message.text.split()
    try:
        dbs = db_session.create_session()
        user = dbs.query(User).get(message.from_user.id)
        # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ MinusOperations
        minus_operations = MinusOperations()
        minus_operations.metal = user.metal  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–µ—Ç–∞–ª–ª
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É
        minus_operations.date = datetime.datetime.strptime(str(message.date).split()[0], "%Y-%m-%d").date()
        minus_operations.quantity = abs(float(split_message[0].replace(',', '.')))  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ
        minus_operations.task = ''  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—á–µ–º—É –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª
        minus_operations.where = ''  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–¥–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª
        # –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
        # –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω—É—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ —Ü–µ–Ω—ã –∏ —Å—É–º–º—ã
        if split_message[-1] != '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞':
            # –ï—Å–ª–∏ '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏' –Ω–µ—Ç—É —Ç–æ
            minus_operations.price = float(split_message[1].replace(',', '.')) if ' ' in message.text \
                else float(user.price)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –º–µ—Ç–∞–ª–ª–∞ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            minus_operations.sum = minus_operations.quantity * minus_operations.price  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É
            # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—É–º–º—ã
            if len(split_message[2:]) == 1:
                # –ï—Å–ª–∏ –≤–ø–∏—Å–∞–ª —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ,
                # —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—É–¥–∞ –≥–¥–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '–≥–¥–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª'
                minus_operations.where = split_message[-1]
            if len(split_message[2:]) >= 2:
                # –ï—Å–ª–∏ –≤–ø–∏—Å–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ –≥–¥–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '–ø–æ—á–µ–º—É –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª'
                minus_operations.task = split_message[2:][-1]
                # –ê –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ –≥–¥–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å '–≥–¥–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª'
                minus_operations.where = split_message[2:][0]
        else:
            # –ï—Å–ª–∏ '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞' –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–æ
            minus_operations.price = 0  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –Ω—É–ª—ë–º
            minus_operations.sum = 0  # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É –Ω—É–ª—ë–º
            minus_operations.task = split_message[-1]  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—á–µ–º—É –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª
            minus_operations.where = split_message[1]  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–¥–µ –±—ã–ª –ø—Ä–æ–¥–∞–Ω –º–µ—Ç–∞–ª–ª
        # –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ 'AllOperations'
        all_operations = AllOperations()
        date_time = str(message.date).split()  # –ë–µ—Ä—ë–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        all_operations.date = datetime.datetime.strptime(date_time[0], "%Y-%m-%d").date()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É
        all_operations.time = datetime.datetime.strptime(date_time[1], "%H:%M:%S").time()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        all_operations.metal = user.metal  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–µ—Ç–∞–ª–ª
        all_operations.quantity = float(split_message[0].replace(',', '.'))  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ
        all_operations.price = minus_operations.price  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É
        all_operations.sum = all_operations.quantity * all_operations.price  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É
        all_operations.comment = minus_operations.where  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        dbs.add(minus_operations)
        dbs.add(all_operations)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        # –¢–∞–∫–∂–µ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∏–≤—à—É—é—Å—è —Å—É–º–º—É –∫ –æ–±—â–µ–π —Å—É–º–º–µ –∫–ª–∏–µ–Ω—Ç–∞
        user.client_amount = user.client_amount - minus_operations.sum
        # –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å —Ç–æ, —É–¥–∞–ª—è–µ–º –µ—ë
        if len(inline_kb_markup.inline_keyboard) != 0:
            inline_kb_markup.inline_keyboard.clear()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ,
        # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ—ë —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞
        inline_kb_markup.add(InlineKeyboardButton(f'–û–±—â–∞—è —Å—É–º–º–∞: {user.client_amount}',
                                                  callback_data='show_temp_amount'))
        await bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - {minus_operations.metal}: '
                                                f'{minus_operations.quantity},'
                                                f' –¶–µ–Ω–∞: {minus_operations.price},'
                                                f' –°—É–º–º–∞: {round(minus_operations.sum)}',
                               reply_markup=inline_kb_markup)
        dbs.commit()
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—à–ª–∞ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ google sheets
        record_minus_operation([minus_operations.metal, minus_operations.quantity, minus_operations.price,
                                minus_operations.sum,
                                str(message.date).split()[0].replace('-', '.'), minus_operations.task,
                                minus_operations.where])
    except Exception:
        await bot.send_message(message.chat.id, f'–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ')
        return


# –°–æ—Å—Ç–æ—è–Ω–∏–µ(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ö—É—à') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(state=Kush.waiting_for_kush_request)
async def do_kush(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    if message.text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    elif message.text == '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞':
        # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        temp_operations[message.from_user.id] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –∑–∞–ø–∏—Å–∞—Ç—å
        current_user.kush_recording = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—É—à
        current_user.client_amount = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞
        await bot.send_message(message.chat.id, '–ö—É—à –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –≤–ø–∏—à–∏—Ç–µ –≤–µ—Å–∞',
                               reply_markup=reply_kb_kush_recording)
        dbs.commit()
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞'
        await Recording.waiting_for_data_record.set()
        return
    elif message.text == '–£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫—É—à–∞':
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç:")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(—Ñ—É–Ω–∫—Ü–∏—é) –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        await Kush.next()
        return


# –°–æ—Å—Ç–æ—è–Ω–∏–µ(—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ö—É—à') –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–µ–Ω–µ–≥ —Ä–∞–±–æ—á–µ–≥–æ
@dp.message_handler(state=Kush.waiting_for_kush_percent)
async def kush_set_percent(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ, —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É 0 –∏ 100
    elif not is_float_int(message.text) or float(message.text) < 0 or float(message.text.lower()) > 100:
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ")
        return
    user = dbs.query(User).get(message.from_user.id)
    # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    user.kush_percent = float(message.text)
    dbs.commit()
    await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –∫—É—à)
    await Kush.waiting_for_kush_request.set()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(state=Recording.waiting_for_data_record)
async def do_record(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
    # '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∫—É—à–∞' –∏–∑ '–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –ö—É—à'
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫—É—à–∞':
        # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        temp_operations[message.from_user.id] = []
        current_user.kush_recording = False
        current_user.client_amount = 0
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∫—É—à–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –≤–µ—Å–∞ —Å–±—Ä–æ—à–µ–Ω—ã',
                               reply_markup=reply_kb_kush)
        await state.finish()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –∫—É—à)
        await Kush.waiting_for_kush_request.set()
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω—É—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    if '-' in message.text.split()[0] and is_float_int(message.text.split()[0]):
        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –∫—É—à
        if not current_user.kush_recording:
            # –ü–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –º–∏–Ω—É—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            await do_minus_operation(message)
        else:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—å –º–∏–Ω—É—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫—É—à–∞")
            return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    elif is_float_int(message.text.split()[0]):
        # –ü–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –ø–ª—é—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await do_plus_operation(message)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞
    elif message.text in metal_types.keys():
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ —Å–º–µ–Ω—è–µ–º —Ç–∏–ø –º–µ—Ç–∞–ª–ª–∞
        await change_metal(message)
    elif message.text == '–°–±—Ä–æ—Å–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É':
        await reset_total_amount(message)
    elif message.text in '–í–µ—Å–∞ –≤–ø–∏—Å–∞–Ω—ã':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–µ—Å
        if not temp_operations[message.from_user.id]:
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–ø–∏—Å–∞–ª–∏ –Ω–µ –æ–¥–∏–Ω –≤–µ—Å',
                                   reply_markup=reply_kb_metals)
            return
        # –û–±—â–∞—è —Å—É–º–º–∞ —Å—É–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–µ–Ω–∞–º '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å'
        total_amount_tmp_s = round(sum(operation[5] for operation in temp_operations[message.from_user.id]))
        # –°—É–º–º–∞ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–æ–±—Ä–∞–ª –∫—É—à –∫–ª–∏–µ–Ω—Ç–∞
        worker_amount = round(total_amount_tmp_s / 100 * current_user.kush_percent)
        # –ò–∑–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã, –∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É –ø–æ–¥ –Ω–æ–≤—É—é —Ü–µ–Ω—É
        for operation in temp_operations[message.from_user.id]:
            operation[4] = float(kush_prices[operation[2]].replace(',', '.'))  # –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É
            operation[5] = operation[3] * operation[4]  # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É
        # –°—É–º–º–∞ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–Ω—è—Ç—å –æ—Ç —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞
        employer_amount = sum(operation[3] * float(kush_prices['–ß–µ—Ä–Ω—ã–π'].replace(',', '.'))
                              for operation in temp_operations[message.from_user.id])
        # –°—É–º–º–∞ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ–π –∫—É—à –±—ã–ª —Ä–∞–∑–æ–±—Ä–∞–Ω
        client_amount = round(sum(operation[5] for operation in temp_operations[message.from_user.id])
                              - employer_amount - worker_amount)
        information = f'\n{"---" * 10}\n'.join([f'–°—É–º–º–∞ —Ä–∞–±–æ—á–µ–≥–æ: {worker_amount}', f'–í–∞—à–∞ –°—É–º–º–∞: {client_amount}'])
        await bot.send_message(message.chat.id, information,
                               reply_markup=reply_kb_kush)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ temp_operations —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ —Ü–µ–Ω–æ–π –∏ —Å—É–º–º–æ–π –≤ –±–¥ –∏ google sheets
        for operation in temp_operations[message.from_user.id]:
            operation[4] = float(kush_prices[operation[2]].replace(',', '.'))  # –ò–∑–º–µ–Ω—è–µ–º —Ü–µ–Ω—É
            operation[5] = operation[3] * operation[4]  # –ò–∑–º–µ–Ω—è–µ–º —Å—É–º–º—É
            all_operations = AllOperations()
            all_operations.date = datetime.datetime.strptime(operation[0], "%Y.%m.%d").date()
            all_operations.time = datetime.datetime.strptime(operation[1], "%H:%M").time()
            all_operations.metal = operation[2]
            all_operations.quantity = operation[3]
            all_operations.price = operation[4]
            all_operations.sum = operation[5]
            all_operations.comment = operation[6]
            dbs.add(all_operations)
            record_plus_operation(operation)
        temp_operations[message.from_user.id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        current_user.kush_recording = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–∞
        current_user.client_amount = 0  # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–ª–∏–µ–Ω—Ç–∞
        dbs.commit()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ –∫—É—à)
        await Kush.waiting_for_kush_request.set()
        return
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—à
        if current_user.kush_recording:
            # –ï—Å–ª–∏ —Ç–∞–∫ —Ç–æ, —É–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            temp_operations[message.from_user.id] = temp_operations[message.from_user.id][:-1]
        else:
            # –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ google sheets
            delete_last_row()
            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            last_row = dbs.query(AllOperations).order_by(AllOperations.id.desc()).first()
            # –£–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –±–¥
            dbs.delete(last_row)
        await bot.send_message(message.chat.id, f'–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                               reply_markup=reply_kb_kush_recording if current_user.kush_recording
                               else reply_kb_metals)
    else:
        await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ")
        return
    dbs.commit()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–û—Ç—á—ë—Ç—ã') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(state=Report.waiting_for_report_request)
async def show_report(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ª–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    elif message.text == '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é(—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–∞–ª–ª–∞ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ) –∏ –ø–µ—Ä–µ–¥–∞—ë–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ
        request = get_report('all_time')
        # –ï—Å–ª–∏ request –Ω–µ—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª, –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if not request:
            request = get_report('all_time')
        # –î–∞–Ω–Ω—É—é –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–°–≤–æ–¥–∫–∞ –≤–µ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é(—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–∞–ª–ª–∞ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ) –∏ –ø–µ—Ä–µ–¥–∞—ë–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ
        request = get_report('today')
        # –ï—Å–ª–∏ request –Ω–µ—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª, –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if not request:
            request = get_report('today')
        # –î–∞–Ω–Ω—É—é –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤
        request = call_metals_prices()
        if not request:
            request = call_metals_prices()
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return
    elif message.text == '–ö—É—à —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤, –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ —á—Ç–æ–±—ã —Ü–µ–Ω—ã –≤–µ—Ä–Ω—É–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        request = call_metals_prices(kush=True)
        if not request:
            request = call_metals_prices(kush=True)
        data = f'\n{"---" * 10}\n'.join([' '.join(cort) for cort in request])
        await bot.send_message(message.chat.id, data,
                               reply_markup=reply_kb_information)
        return


# –°–æ—Å—Ç–æ—è–Ω–∏–µ (–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(state=CleanWeights.waiting_for_request)
async def clean_weights(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –µ–≥–æ —á–∏—Å—Ç—ã–º –≤–µ—Å–æ–º':
        await bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º',
                               reply_markup=reply_kb_clean_weights)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(—Ñ—É–Ω–∫—Ü–∏—é) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
        await CleanWeights.waiting_for_new_clean_weights.set()
        return
    if message.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç':
        await bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞',
                               reply_markup=reply_kb_clean_weights)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(—Ñ—É–Ω–∫—Ü–∏—é) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
        await CleanWeights.waiting_for_remove_clean_weight.set()
    if message.text in clean_weights_buttons:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –µ–≥–æ —á–∏—Å—Ç—ã–º –≤–µ—Å–æ–º
        clean_weight = dbs.query(ButtonsCleanWeights).filter(ButtonsCleanWeights.name_clean_weight
                                                             == message.text).first()
        await bot.send_photo(message.from_user.id, types.InputFile(clean_weight.path),
                             caption=clean_weight.description_clean_w,
                             reply_to_message_id=message.message_id)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ(—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞') –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
@dp.message_handler(content_types=['photo', 'text'], state=CleanWeights.waiting_for_new_clean_weights)
async def add_new_clean_weight(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    if not message.caption:
        await bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å"
                                                " –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É",
                               reply_markup=reply_kb_clean_weights)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞')
        await CleanWeights.waiting_for_request.set()
        return
    if message.md_text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç —Å '-'
    if not message.md_text or '-' not in message.md_text and message.md_text.count('-') == 1 or not message.photo or\
            '-' not in message.caption:
        await bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å"
                                                " –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É",
                               reply_markup=reply_kb_clean_weights)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞')
        await CleanWeights.waiting_for_request.set()
        return
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å—Ç—å –ª–∏ —á–∏—Å—Ç—ã–π –≤–µ—Å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤
    if message.md_text.split('-')[0][:-1].strip() in clean_weights_buttons:
        await bot.send_message(message.chat.id, '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.'
                                                ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
                               reply_markup=reply_kb_clean_weights)
        return
    # –°–æ–∑–¥–∞—ë–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ButtonsCleanWeights
    new_clean_weight = ButtonsCleanWeights()
    new_clean_weight.name_clean_weight = message.md_text.split('-')[0][:-1].strip()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    new_clean_weight.description_clean_w = message.md_text.split('-')[1].strip()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞
    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∏—Å—Ç—ã–π –≤–µ—Å –∏–∑ 'ButtonsCleanWeights'
    last_row = dbs.query(ButtonsCleanWeights).order_by(ButtonsCleanWeights.id.desc()).first()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –≤ 'ButtonsCleanWeights'
    if last_row:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ, –±–µ—Ä—ë–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞ –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1, –¥–µ–ª–∞–µ–º —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        # –ò —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        path = f'photos_of_clean_weights/{last_row.id + 1}.jpg'
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç—É —Ç–æ, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º 1 –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        # –ò —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        path = f'photos_of_clean_weights/1.jpg'
    new_clean_weight.path = path  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
    dbs.add(new_clean_weight)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –≤–µ—Å –≤ –±–¥
    clean_weights_buttons.append(new_clean_weight.name_clean_weight)  # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –≤–µ—Å –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    await message.photo[-1].download(path)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –µ–π –ø—É—Ç—å –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ
    reply_kb_clean_weights.keyboard = reply_kb_clean_weights.keyboard[:-1]  # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ–¥–Ω—É—é –∫–Ω–æ–ø–∫—É
    if len(dbs.query(ButtonsCleanWeights).all()) % 2 != 0:  # –ï—Å–ª–∏ –≤ –±–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤ –Ω–µ —á—ë—Ç–Ω–æ–µ
        # –¢–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        reply_kb_clean_weights.add(types.KeyboardButton(new_clean_weight.name_clean_weight))
    else:
        # –ï—Å–ª–∏ —á—ë—Ç–Ω–æ–µ —Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π –≤–µ—Å –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —á–∏—Å—Ç—ã–º –≤–µ—Å–æ–≤
        reply_kb_clean_weights.insert(types.KeyboardButton(new_clean_weight.name_clean_weight))
    reply_kb_clean_weights.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â—è–µ–º –∫–Ω–æ–ø–∫—É
    await bot.send_message(message.chat.id, '–ù–æ–≤—ã–π —á–∏—Å—Ç—ã–π –≤–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω!',
                           reply_markup=reply_kb_clean_weights)
    dbs.commit()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞')
    await CleanWeights.waiting_for_request.set()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ(—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞') –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
@dp.message_handler(content_types=['photo', 'text'], state=CleanWeights.waiting_for_remove_clean_weight)
async def remove_clean_weight(message: types.Message, state: FSMContext):
    dbs = db_session.create_session()
    if message.md_text in '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é',
                               reply_markup=reply_kb_menu)
        await state.finish()
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤
    elif message.text in clean_weights_buttons:
        # –ë–µ—Ä—ë–º —á–∏—Å—Ç—ã–π –≤–µ—Å –∏–∑ –±–¥ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–º –Ω–∞–∑–≤–∞–Ω–∏—é
        clean_weight = dbs.query(ButtonsCleanWeights).filter(ButtonsCleanWeights.name_clean_weight
                                                             == message.text).first()
        os.remove(clean_weight.path)  # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–∏—Å—Ç–æ–≥–æ –≤–µ—Å–∞
        clean_weights_buttons.remove(clean_weight.name_clean_weight)  # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∏—Å—Ç—ã–π –≤–µ—Å
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_kb_clean_weights.keyboard.remove([types.KeyboardButton(clean_weight.name_clean_weight)])
        dbs.delete(clean_weight)  # –ò –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ –±–¥
        dbs.commit()
        await bot.send_message(message.chat.id, '–ß–∏—Å—Ç—ã–π –≤–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!',
                               reply_markup=reply_kb_clean_weights)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–ú–µ–Ω—é –∫–Ω–æ–ø–∫–∏ '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞')
        await CleanWeights.waiting_for_request.set()
    else:
        await bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!',
                               reply_markup=reply_kb_clean_weights)


@dp.message_handler(commands=['start'])
async def begin(message: types.Message):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not current_user:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        user = User()
        user.id = message.from_user.id
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        dbs.add(user)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_user.metal = '–ß–µ—Ä–Ω—ã–π'
        current_user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        current_user.client_amount = 0
        current_user.kush_recording = False
        current_user.operation_ended = False
        current_user.kush_percent = 0
    dbs.commit()
    await bot.send_message(message.chat.id, '–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', reply_markup=reply_kb_menu)


# –§—É–Ω–∫–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
@dp.message_handler(commands=['update_prices'])
async def update_prices(message: types.Message):
    global metal_types, kush_prices
    request_metals_types = call_metals_prices()
    if not request_metals_types:
        request_metals_types = call_metals_prices()
    request_kush_prices = call_metals_prices(kush=True)
    if not request_kush_prices:
        request_kush_prices = call_metals_prices(kush=True)
    metal_types = dict(request_metals_types)
    kush_prices = dict(request_kush_prices)
    await bot.send_message(message.chat.id, '–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=reply_kb_menu)


@dp.message_handler(content_types=['text'])
async def set_text(message):
    global temp_operations
    if message.chat.type == 'private':
        if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞':
            await bot.send_message(message.chat.id, '–¢–∏–ø—ã –º–µ—Ç–∞–ª–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_metals)
            await Recording.waiting_for_data_record.set()
            return
        elif message.text == '–ö—É—à':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –∫—É—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_kush)
            await Kush.waiting_for_kush_request.set()
        elif message.text == '–û—Ç—á—ë—Ç—ã':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_information)
            await Report.waiting_for_report_request.set()
        elif message.text == '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞':
            await bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                   reply_markup=reply_kb_clean_weights)
            await CleanWeights.waiting_for_request.set()
        elif message.text == 'üìö–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
            await bot.send_message(message.chat.id, GUIDE,
                                   reply_markup=reply_kb_menu)
        else:
            await bot.send_message(message.chat.id, '–í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–π –∫–æ—Ç–µ–≥–æ—Ä–∏–∏',
                                   reply_markup=reply_kb_menu)


async def for_startup(empty):
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–µ–Ω—é
    for user_id in db_session.create_session().query(User.id).all():
        await bot.send_message(user_id[0], '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!', reply_markup=reply_kb_menu)


if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=for_startup)
        except Exception as e:
            print(e)
            executor.start_polling(dp, skip_updates=True, on_startup=for_startup)